/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class ChainAddrResolverData extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): ChainAddrResolverData;
  methods: {
    supportsInterface(
      interfaceId: string | number[]
    ): TransactionObject<boolean>;

    addr(node: string | number[]): TransactionObject<string>;

    setAddr(
      node: string | number[],
      addrValue: string
    ): TransactionObject<void>;

    content(node: string | number[]): TransactionObject<string>;

    setContent(
      node: string | number[],
      contentValue: string | number[]
    ): TransactionObject<void>;

    chainAddr(
      node: string | number[],
      chain: string | number[]
    ): TransactionObject<string>;

    setChainAddr(
      node: string | number[],
      chain: string | number[],
      addrValue: string
    ): TransactionObject<void>;

    chainMetadata(
      node: string | number[],
      chain: string | number[]
    ): TransactionObject<string>;

    setChainMetadata(
      node: string | number[],
      chain: string | number[],
      metadataValue: string | number[]
    ): TransactionObject<void>;

    chainAddrAndMetadata(
      node: string | number[],
      chain: string | number[]
    ): TransactionObject<{
      0: string;
      1: string;
    }>;

    setChainAddrWithMetadata(
      node: string | number[],
      chain: string | number[],
      addrValue: string,
      metadataValue: string | number[]
    ): TransactionObject<void>;
  };
  events: {
    AddrChanged: ContractEvent<{
      node: string;
      addr: string;
      0: string;
      1: string;
    }>;
    ChainAddrChanged: ContractEvent<{
      node: string;
      chain: string;
      addr: string;
      0: string;
      1: string;
      2: string;
    }>;
    ChainMetadataChanged: ContractEvent<{
      node: string;
      chain: string;
      metadata: string;
      0: string;
      1: string;
      2: string;
    }>;
    ContentChanged: ContractEvent<{
      node: string;
      content: string;
      0: string;
      1: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
