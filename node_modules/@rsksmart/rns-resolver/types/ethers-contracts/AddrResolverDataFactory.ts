/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { AddrResolverData } from "./AddrResolverData";

export class AddrResolverDataFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(rnsAddr: string): Promise<AddrResolverData> {
    return super.deploy(rnsAddr) as Promise<AddrResolverData>;
  }
  getDeployTransaction(rnsAddr: string): UnsignedTransaction {
    return super.getDeployTransaction(rnsAddr);
  }
  attach(address: string): AddrResolverData {
    return super.attach(address) as AddrResolverData;
  }
  connect(signer: Signer): AddrResolverDataFactory {
    return super.connect(signer) as AddrResolverDataFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddrResolverData {
    return new Contract(address, _abi, signerOrProvider) as AddrResolverData;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract AbstractRNS",
        name: "rnsAddr",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    payable: true,
    stateMutability: "payable",
    type: "fallback"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "kind",
        type: "bytes32"
      }
    ],
    name: "has",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceID",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "pure",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      }
    ],
    name: "addr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "addrValue",
        type: "address"
      }
    ],
    name: "setAddr",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      }
    ],
    name: "content",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes32",
        name: "node",
        type: "bytes32"
      },
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32"
      }
    ],
    name: "setContent",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161073b38038061073b8339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506106a7806100946000396000f3fe6080604052600436106100555760003560e01c806301ffc9a71461005a5780632dff6941146100cc5780633b3b57de1461011b57806341b9dc2b14610196578063c3d014d6146101f3578063d5fa2b0014610238575b600080fd5b34801561006657600080fd5b506100b26004803603602081101561007d57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610293565b604051808215151515815260200191505060405180910390f35b3480156100d857600080fd5b50610105600480360360208110156100ef57600080fd5b81019080803590602001909291905050506102f5565b6040518082815260200191505060405180910390f35b34801561012757600080fd5b506101546004803603602081101561013e57600080fd5b8101908080359060200190929190505050610312565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a257600080fd5b506101d9600480360360408110156101b957600080fd5b81019080803590602001909291908035906020019092919050505061034f565b604051808215151515815260200191505060405180910390f35b3480156101ff57600080fd5b506102366004803603604081101561021657600080fd5b810190808035906020019092919080359060200190929190505050610434565b005b34801561024457600080fd5b506102916004803603604081101561025b57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610536565b005b6000633b3b57de60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102ee575063d8389dc560e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600060026000838152602001908152602001600020549050919050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f6164647200000000000000000000000000000000000000000000000000000000821480156103e05750600073ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b8061042c57507f68617368000000000000000000000000000000000000000000000000000000008214801561042b57506000801b600260008581526020019081526020016000205414155b5b905092915050565b813373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156104be57600080fd5b505afa1580156104d2573d6000803e3d6000fd5b505050506040513d60208110156104e857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461051957600080fd5b816002600085815260200190815260200160002081905550505050565b813373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156105c057600080fd5b505afa1580156105d4573d6000803e3d6000fd5b505050506040513d60208110156105ea57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461061b57600080fd5b816001600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505056fea265627a7a72315820018db71be92fa40830be9e279c886c9303fcd6ce4d06b8b880df2e5e96cbb84664736f6c63430005100032";
