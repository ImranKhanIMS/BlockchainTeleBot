/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface TokenRegistrarDataInterface extends Interface {
  functions: {
    rns: TypedFunctionDescription<{ encode([]: []): string }>;

    rootNode: TypedFunctionDescription<{ encode([]: []): string }>;

    sealedBids: TypedFunctionDescription<{
      encode([,]: [string, Arrayish]): string;
    }>;

    tokenContract: TypedFunctionDescription<{ encode([]: []): string }>;

    startAuction: TypedFunctionDescription<{
      encode([_hash]: [Arrayish]): string;
    }>;

    startAuctions: TypedFunctionDescription<{
      encode([_hashes]: [Arrayish[]]): string;
    }>;

    newBid: TypedFunctionDescription<{
      encode([_sealedBid, _tokenQuantity]: [Arrayish, BigNumberish]): string;
    }>;

    newBidWithToken: TypedFunctionDescription<{
      encode([_from, _tokenQuantity, _sealedBid]: [
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    startAuctionsAndBid: TypedFunctionDescription<{
      encode([_hashes, _sealedBid, _tokenQuantity]: [
        Arrayish[],
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    unsealBid: TypedFunctionDescription<{
      encode([_hash, _value, _salt]: [
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    finalizeAuction: TypedFunctionDescription<{
      encode([_hash]: [Arrayish]): string;
    }>;

    transfer: TypedFunctionDescription<{
      encode([_hash, _newOwner]: [Arrayish, string]): string;
    }>;

    releaseDeed: TypedFunctionDescription<{
      encode([_hash]: [Arrayish]): string;
    }>;

    eraseNode: TypedFunctionDescription<{
      encode([_labels]: [Arrayish[]]): string;
    }>;

    transferRegistrars: TypedFunctionDescription<{
      encode([_hash]: [Arrayish]): string;
    }>;

    payRent: TypedFunctionDescription<{ encode([_hash]: [Arrayish]): string }>;

    payRentWithToken: TypedFunctionDescription<{
      encode([_from, _tokenQuantity, _hash]: [
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    acceptRegistrarTransfer: TypedFunctionDescription<{
      encode([_hash, _deed, _registrationDate]: [
        Arrayish,
        string,
        BigNumberish
      ]): string;
    }>;

    state: TypedFunctionDescription<{ encode([_hash]: [Arrayish]): string }>;

    entries: TypedFunctionDescription<{ encode([_hash]: [Arrayish]): string }>;

    shaBid: TypedFunctionDescription<{
      encode([_hash, _owner, _value, _salt]: [
        Arrayish,
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    tokenFallback: TypedFunctionDescription<{
      encode([_from, _value, _data]: [string, BigNumberish, Arrayish]): string;
    }>;
  };

  events: {
    AuctionStarted: TypedEventDescription<{
      encodeTopics([hash, registrationDate]: [Arrayish | null, null]): string[];
    }>;

    BidRevealed: TypedEventDescription<{
      encodeTopics([hash, owner, value, status]: [
        Arrayish | null,
        string | null,
        null,
        null
      ]): string[];
    }>;

    HashRegistered: TypedEventDescription<{
      encodeTopics([hash, owner, value, registrationDate]: [
        Arrayish | null,
        string | null,
        null,
        null
      ]): string[];
    }>;

    HashReleased: TypedEventDescription<{
      encodeTopics([hash, value]: [Arrayish | null, null]): string[];
    }>;

    NewBid: TypedEventDescription<{
      encodeTopics([hash, bidder, deposit]: [
        Arrayish | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class TokenRegistrarData extends Contract {
  connect(signerOrProvider: Signer | Provider | string): TokenRegistrarData;
  attach(addressOrName: string): TokenRegistrarData;
  deployed(): Promise<TokenRegistrarData>;

  on(event: EventFilter | string, listener: Listener): TokenRegistrarData;
  once(event: EventFilter | string, listener: Listener): TokenRegistrarData;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): TokenRegistrarData;
  removeAllListeners(eventName: EventFilter | string): TokenRegistrarData;
  removeListener(eventName: any, listener: Listener): TokenRegistrarData;

  interface: TokenRegistrarDataInterface;

  functions: {
    rns(): Promise<string>;

    rootNode(): Promise<string>;

    sealedBids(arg0: string, arg1: Arrayish): Promise<string>;

    tokenContract(): Promise<string>;

    startAuction(
      _hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    startAuctions(
      _hashes: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    newBid(
      _sealedBid: Arrayish,
      _tokenQuantity: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    newBidWithToken(
      _from: string,
      _tokenQuantity: BigNumberish,
      _sealedBid: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    startAuctionsAndBid(
      _hashes: Arrayish[],
      _sealedBid: Arrayish,
      _tokenQuantity: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    unsealBid(
      _hash: Arrayish,
      _value: BigNumberish,
      _salt: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finalizeAuction(
      _hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transfer(
      _hash: Arrayish,
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    releaseDeed(
      _hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    eraseNode(
      _labels: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferRegistrars(
      _hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    payRent(
      _hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    payRentWithToken(
      _from: string,
      _tokenQuantity: BigNumberish,
      _hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    acceptRegistrarTransfer(
      _hash: Arrayish,
      _deed: string,
      _registrationDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    state(_hash: Arrayish): Promise<number>;

    entries(
      _hash: Arrayish
    ): Promise<{
      0: number;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    shaBid(
      _hash: Arrayish,
      _owner: string,
      _value: BigNumberish,
      _salt: Arrayish
    ): Promise<string>;

    tokenFallback(
      _from: string,
      _value: BigNumberish,
      _data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  rns(): Promise<string>;

  rootNode(): Promise<string>;

  sealedBids(arg0: string, arg1: Arrayish): Promise<string>;

  tokenContract(): Promise<string>;

  startAuction(
    _hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  startAuctions(
    _hashes: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  newBid(
    _sealedBid: Arrayish,
    _tokenQuantity: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  newBidWithToken(
    _from: string,
    _tokenQuantity: BigNumberish,
    _sealedBid: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  startAuctionsAndBid(
    _hashes: Arrayish[],
    _sealedBid: Arrayish,
    _tokenQuantity: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  unsealBid(
    _hash: Arrayish,
    _value: BigNumberish,
    _salt: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finalizeAuction(
    _hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transfer(
    _hash: Arrayish,
    _newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  releaseDeed(
    _hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  eraseNode(
    _labels: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferRegistrars(
    _hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  payRent(
    _hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  payRentWithToken(
    _from: string,
    _tokenQuantity: BigNumberish,
    _hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  acceptRegistrarTransfer(
    _hash: Arrayish,
    _deed: string,
    _registrationDate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  state(_hash: Arrayish): Promise<number>;

  entries(
    _hash: Arrayish
  ): Promise<{
    0: number;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  shaBid(
    _hash: Arrayish,
    _owner: string,
    _value: BigNumberish,
    _salt: Arrayish
  ): Promise<string>;

  tokenFallback(
    _from: string,
    _value: BigNumberish,
    _data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AuctionStarted(hash: Arrayish | null, registrationDate: null): EventFilter;

    BidRevealed(
      hash: Arrayish | null,
      owner: string | null,
      value: null,
      status: null
    ): EventFilter;

    HashRegistered(
      hash: Arrayish | null,
      owner: string | null,
      value: null,
      registrationDate: null
    ): EventFilter;

    HashReleased(hash: Arrayish | null, value: null): EventFilter;

    NewBid(
      hash: Arrayish | null,
      bidder: string | null,
      deposit: null
    ): EventFilter;
  };

  estimate: {
    rns(): Promise<BigNumber>;

    rootNode(): Promise<BigNumber>;

    sealedBids(arg0: string, arg1: Arrayish): Promise<BigNumber>;

    tokenContract(): Promise<BigNumber>;

    startAuction(_hash: Arrayish): Promise<BigNumber>;

    startAuctions(_hashes: Arrayish[]): Promise<BigNumber>;

    newBid(
      _sealedBid: Arrayish,
      _tokenQuantity: BigNumberish
    ): Promise<BigNumber>;

    newBidWithToken(
      _from: string,
      _tokenQuantity: BigNumberish,
      _sealedBid: Arrayish
    ): Promise<BigNumber>;

    startAuctionsAndBid(
      _hashes: Arrayish[],
      _sealedBid: Arrayish,
      _tokenQuantity: BigNumberish
    ): Promise<BigNumber>;

    unsealBid(
      _hash: Arrayish,
      _value: BigNumberish,
      _salt: Arrayish
    ): Promise<BigNumber>;

    finalizeAuction(_hash: Arrayish): Promise<BigNumber>;

    transfer(_hash: Arrayish, _newOwner: string): Promise<BigNumber>;

    releaseDeed(_hash: Arrayish): Promise<BigNumber>;

    eraseNode(_labels: Arrayish[]): Promise<BigNumber>;

    transferRegistrars(_hash: Arrayish): Promise<BigNumber>;

    payRent(_hash: Arrayish): Promise<BigNumber>;

    payRentWithToken(
      _from: string,
      _tokenQuantity: BigNumberish,
      _hash: Arrayish
    ): Promise<BigNumber>;

    acceptRegistrarTransfer(
      _hash: Arrayish,
      _deed: string,
      _registrationDate: BigNumberish
    ): Promise<BigNumber>;

    state(_hash: Arrayish): Promise<BigNumber>;

    entries(_hash: Arrayish): Promise<BigNumber>;

    shaBid(
      _hash: Arrayish,
      _owner: string,
      _value: BigNumberish,
      _salt: Arrayish
    ): Promise<BigNumber>;

    tokenFallback(
      _from: string,
      _value: BigNumberish,
      _data: Arrayish
    ): Promise<BigNumber>;
  };
}
