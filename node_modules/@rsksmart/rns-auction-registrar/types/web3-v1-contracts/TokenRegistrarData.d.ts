/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class TokenRegistrarData extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): TokenRegistrarData;
  methods: {
    rns(): TransactionObject<string>;

    rootNode(): TransactionObject<string>;

    sealedBids(
      arg0: string,
      arg1: string | number[]
    ): TransactionObject<string>;

    tokenContract(): TransactionObject<string>;

    startAuction(_hash: string | number[]): TransactionObject<void>;

    startAuctions(_hashes: (string | number[])[]): TransactionObject<void>;

    newBid(
      _sealedBid: string | number[],
      _tokenQuantity: number | string
    ): TransactionObject<void>;

    newBidWithToken(
      _from: string,
      _tokenQuantity: number | string,
      _sealedBid: string | number[]
    ): TransactionObject<void>;

    startAuctionsAndBid(
      _hashes: (string | number[])[],
      _sealedBid: string | number[],
      _tokenQuantity: number | string
    ): TransactionObject<void>;

    unsealBid(
      _hash: string | number[],
      _value: number | string,
      _salt: string | number[]
    ): TransactionObject<void>;

    finalizeAuction(_hash: string | number[]): TransactionObject<void>;

    transfer(
      _hash: string | number[],
      _newOwner: string
    ): TransactionObject<void>;

    releaseDeed(_hash: string | number[]): TransactionObject<void>;

    eraseNode(_labels: (string | number[])[]): TransactionObject<void>;

    transferRegistrars(_hash: string | number[]): TransactionObject<void>;

    payRent(_hash: string | number[]): TransactionObject<void>;

    payRentWithToken(
      _from: string,
      _tokenQuantity: number | string,
      _hash: string | number[]
    ): TransactionObject<void>;

    acceptRegistrarTransfer(
      _hash: string | number[],
      _deed: string,
      _registrationDate: number | string
    ): TransactionObject<void>;

    state(_hash: string | number[]): TransactionObject<string>;

    entries(
      _hash: string | number[]
    ): TransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    shaBid(
      _hash: string | number[],
      _owner: string,
      _value: number | string,
      _salt: string | number[]
    ): TransactionObject<string>;

    tokenFallback(
      _from: string,
      _value: number | string,
      _data: string | number[]
    ): TransactionObject<boolean>;
  };
  events: {
    AuctionStarted: ContractEvent<{
      hash: string;
      registrationDate: string;
      0: string;
      1: string;
    }>;
    BidRevealed: ContractEvent<{
      hash: string;
      owner: string;
      value: string;
      status: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;
    HashRegistered: ContractEvent<{
      hash: string;
      owner: string;
      value: string;
      registrationDate: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;
    HashReleased: ContractEvent<{
      hash: string;
      value: string;
      0: string;
      1: string;
    }>;
    NewBid: ContractEvent<{
      hash: string;
      bidder: string;
      deposit: string;
      0: string;
      1: string;
      2: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
