/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class ResolverV1Data extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): ResolverV1Data;
  methods: {
    ABI(
      node: string | number[],
      contentTypes: number | string
    ): TransactionObject<{
      0: string;
      1: string;
    }>;

    addr(node: string | number[]): TransactionObject<string>;

    authorisations(
      arg0: string | number[],
      arg1: string,
      arg2: string
    ): TransactionObject<boolean>;

    contenthash(node: string | number[]): TransactionObject<string>;

    interfaceImplementer(
      node: string | number[],
      interfaceID: string | number[]
    ): TransactionObject<string>;

    pubkey(
      node: string | number[]
    ): TransactionObject<{
      x: string;
      y: string;
      0: string;
      1: string;
    }>;

    rns(): TransactionObject<string>;

    setABI(
      node: string | number[],
      contentType: number | string,
      data: string | number[]
    ): TransactionObject<void>;

    setAddr(
      node: string | number[],
      coinType: number | string,
      a: string | number[]
    ): TransactionObject<void>;

    setContenthash(
      node: string | number[],
      hash: string | number[]
    ): TransactionObject<void>;

    setInterface(
      node: string | number[],
      interfaceID: string | number[],
      implementer: string
    ): TransactionObject<void>;

    setPubkey(
      node: string | number[],
      x: string | number[],
      y: string | number[]
    ): TransactionObject<void>;

    setText(
      node: string | number[],
      key: string,
      value: string
    ): TransactionObject<void>;

    supportsInterface(
      interfaceID: string | number[]
    ): TransactionObject<boolean>;

    text(node: string | number[], key: string): TransactionObject<string>;

    initialize(_rns: string): TransactionObject<void>;

    setAuthorisation(
      node: string | number[],
      target: string,
      isAuthorised: boolean
    ): TransactionObject<void>;

    multicall(data: (string | number[])[]): TransactionObject<string[]>;
  };
  events: {
    ABIChanged: ContractEvent<{
      node: string;
      contentType: string;
      0: string;
      1: string;
    }>;
    AddrChanged: ContractEvent<{
      node: string;
      a: string;
      0: string;
      1: string;
    }>;
    AddressChanged: ContractEvent<{
      node: string;
      coinType: string;
      newAddress: string;
      0: string;
      1: string;
      2: string;
    }>;
    AuthorisationChanged: ContractEvent<{
      node: string;
      owner: string;
      target: string;
      isAuthorised: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;
    ContenthashChanged: ContractEvent<{
      node: string;
      hash: string;
      0: string;
      1: string;
    }>;
    InterfaceChanged: ContractEvent<{
      node: string;
      interfaceID: string;
      implementer: string;
      0: string;
      1: string;
      2: string;
    }>;
    PubkeyChanged: ContractEvent<{
      node: string;
      x: string;
      y: string;
      0: string;
      1: string;
      2: string;
    }>;
    TextChanged: ContractEvent<{
      node: string;
      indexedKey: string;
      key: string;
      0: string;
      1: string;
      2: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
