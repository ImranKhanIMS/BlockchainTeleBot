/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface AddrResolverDataInterface extends Interface {
  functions: {
    has: TypedFunctionDescription<{
      encode([node, kind]: [Arrayish, Arrayish]): string;
    }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceID]: [Arrayish]): string;
    }>;

    addr: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    setAddr: TypedFunctionDescription<{
      encode([node, addrValue]: [Arrayish, string]): string;
    }>;

    content: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    setContent: TypedFunctionDescription<{
      encode([node, hash]: [Arrayish, Arrayish]): string;
    }>;
  };

  events: {};
}

export class AddrResolverData extends Contract {
  connect(signerOrProvider: Signer | Provider | string): AddrResolverData;
  attach(addressOrName: string): AddrResolverData;
  deployed(): Promise<AddrResolverData>;

  on(event: EventFilter | string, listener: Listener): AddrResolverData;
  once(event: EventFilter | string, listener: Listener): AddrResolverData;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): AddrResolverData;
  removeAllListeners(eventName: EventFilter | string): AddrResolverData;
  removeListener(eventName: any, listener: Listener): AddrResolverData;

  interface: AddrResolverDataInterface;

  functions: {
    has(node: Arrayish, kind: Arrayish): Promise<boolean>;

    supportsInterface(interfaceID: Arrayish): Promise<boolean>;

    addr(node: Arrayish): Promise<string>;

    setAddr(
      node: Arrayish,
      addrValue: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    content(node: Arrayish): Promise<string>;

    setContent(
      node: Arrayish,
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  has(node: Arrayish, kind: Arrayish): Promise<boolean>;

  supportsInterface(interfaceID: Arrayish): Promise<boolean>;

  addr(node: Arrayish): Promise<string>;

  setAddr(
    node: Arrayish,
    addrValue: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  content(node: Arrayish): Promise<string>;

  setContent(
    node: Arrayish,
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    has(node: Arrayish, kind: Arrayish): Promise<BigNumber>;

    supportsInterface(interfaceID: Arrayish): Promise<BigNumber>;

    addr(node: Arrayish): Promise<BigNumber>;

    setAddr(node: Arrayish, addrValue: string): Promise<BigNumber>;

    content(node: Arrayish): Promise<BigNumber>;

    setContent(node: Arrayish, hash: Arrayish): Promise<BigNumber>;
  };
}
