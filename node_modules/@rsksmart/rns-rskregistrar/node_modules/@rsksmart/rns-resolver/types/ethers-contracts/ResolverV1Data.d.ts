/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ResolverV1DataInterface extends Interface {
  functions: {
    ABI: TypedFunctionDescription<{
      encode([node, contentTypes]: [Arrayish, BigNumberish]): string;
    }>;

    addr: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    authorisations: TypedFunctionDescription<{
      encode([, ,]: [Arrayish, string, string]): string;
    }>;

    contenthash: TypedFunctionDescription<{
      encode([node]: [Arrayish]): string;
    }>;

    interfaceImplementer: TypedFunctionDescription<{
      encode([node, interfaceID]: [Arrayish, Arrayish]): string;
    }>;

    pubkey: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    rns: TypedFunctionDescription<{ encode([]: []): string }>;

    setABI: TypedFunctionDescription<{
      encode([node, contentType, data]: [
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    setAddr: TypedFunctionDescription<{
      encode([node, coinType, a]: [Arrayish, BigNumberish, Arrayish]): string;
    }>;

    setContenthash: TypedFunctionDescription<{
      encode([node, hash]: [Arrayish, Arrayish]): string;
    }>;

    setInterface: TypedFunctionDescription<{
      encode([node, interfaceID, implementer]: [
        Arrayish,
        Arrayish,
        string
      ]): string;
    }>;

    setPubkey: TypedFunctionDescription<{
      encode([node, x, y]: [Arrayish, Arrayish, Arrayish]): string;
    }>;

    setText: TypedFunctionDescription<{
      encode([node, key, value]: [Arrayish, string, string]): string;
    }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceID]: [Arrayish]): string;
    }>;

    text: TypedFunctionDescription<{
      encode([node, key]: [Arrayish, string]): string;
    }>;

    initialize: TypedFunctionDescription<{ encode([_rns]: [string]): string }>;

    setAuthorisation: TypedFunctionDescription<{
      encode([node, target, isAuthorised]: [Arrayish, string, boolean]): string;
    }>;

    multicall: TypedFunctionDescription<{
      encode([data]: [Arrayish[]]): string;
    }>;
  };

  events: {
    ABIChanged: TypedEventDescription<{
      encodeTopics([node, contentType]: [
        Arrayish | null,
        BigNumberish | null
      ]): string[];
    }>;

    AddrChanged: TypedEventDescription<{
      encodeTopics([node, a]: [Arrayish | null, null]): string[];
    }>;

    AddressChanged: TypedEventDescription<{
      encodeTopics([node, coinType, newAddress]: [
        Arrayish | null,
        null,
        null
      ]): string[];
    }>;

    AuthorisationChanged: TypedEventDescription<{
      encodeTopics([node, owner, target, isAuthorised]: [
        Arrayish | null,
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    ContenthashChanged: TypedEventDescription<{
      encodeTopics([node, hash]: [Arrayish | null, null]): string[];
    }>;

    InterfaceChanged: TypedEventDescription<{
      encodeTopics([node, interfaceID, implementer]: [
        Arrayish | null,
        Arrayish | null,
        null
      ]): string[];
    }>;

    PubkeyChanged: TypedEventDescription<{
      encodeTopics([node, x, y]: [Arrayish | null, null, null]): string[];
    }>;

    TextChanged: TypedEventDescription<{
      encodeTopics([node, indexedKey, key]: [
        Arrayish | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class ResolverV1Data extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ResolverV1Data;
  attach(addressOrName: string): ResolverV1Data;
  deployed(): Promise<ResolverV1Data>;

  on(event: EventFilter | string, listener: Listener): ResolverV1Data;
  once(event: EventFilter | string, listener: Listener): ResolverV1Data;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ResolverV1Data;
  removeAllListeners(eventName: EventFilter | string): ResolverV1Data;
  removeListener(eventName: any, listener: Listener): ResolverV1Data;

  interface: ResolverV1DataInterface;

  functions: {
    ABI(
      node: Arrayish,
      contentTypes: BigNumberish
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    addr(node: Arrayish): Promise<string>;

    authorisations(
      arg0: Arrayish,
      arg1: string,
      arg2: string
    ): Promise<boolean>;

    contenthash(node: Arrayish): Promise<string>;

    interfaceImplementer(
      node: Arrayish,
      interfaceID: Arrayish
    ): Promise<string>;

    pubkey(
      node: Arrayish
    ): Promise<{
      x: string;
      y: string;
      0: string;
      1: string;
    }>;

    rns(): Promise<string>;

    setABI(
      node: Arrayish,
      contentType: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAddr(
      node: Arrayish,
      coinType: BigNumberish,
      a: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setContenthash(
      node: Arrayish,
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setInterface(
      node: Arrayish,
      interfaceID: Arrayish,
      implementer: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setPubkey(
      node: Arrayish,
      x: Arrayish,
      y: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setText(
      node: Arrayish,
      key: string,
      value: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceID: Arrayish): Promise<boolean>;

    text(node: Arrayish, key: string): Promise<string>;

    initialize(
      _rns: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAuthorisation(
      node: Arrayish,
      target: string,
      isAuthorised: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    multicall(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  ABI(
    node: Arrayish,
    contentTypes: BigNumberish
  ): Promise<{
    0: BigNumber;
    1: string;
  }>;

  addr(node: Arrayish): Promise<string>;

  authorisations(arg0: Arrayish, arg1: string, arg2: string): Promise<boolean>;

  contenthash(node: Arrayish): Promise<string>;

  interfaceImplementer(node: Arrayish, interfaceID: Arrayish): Promise<string>;

  pubkey(
    node: Arrayish
  ): Promise<{
    x: string;
    y: string;
    0: string;
    1: string;
  }>;

  rns(): Promise<string>;

  setABI(
    node: Arrayish,
    contentType: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAddr(
    node: Arrayish,
    coinType: BigNumberish,
    a: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setContenthash(
    node: Arrayish,
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setInterface(
    node: Arrayish,
    interfaceID: Arrayish,
    implementer: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setPubkey(
    node: Arrayish,
    x: Arrayish,
    y: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setText(
    node: Arrayish,
    key: string,
    value: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceID: Arrayish): Promise<boolean>;

  text(node: Arrayish, key: string): Promise<string>;

  initialize(
    _rns: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAuthorisation(
    node: Arrayish,
    target: string,
    isAuthorised: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  multicall(
    data: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ABIChanged(
      node: Arrayish | null,
      contentType: BigNumberish | null
    ): EventFilter;

    AddrChanged(node: Arrayish | null, a: null): EventFilter;

    AddressChanged(
      node: Arrayish | null,
      coinType: null,
      newAddress: null
    ): EventFilter;

    AuthorisationChanged(
      node: Arrayish | null,
      owner: string | null,
      target: string | null,
      isAuthorised: null
    ): EventFilter;

    ContenthashChanged(node: Arrayish | null, hash: null): EventFilter;

    InterfaceChanged(
      node: Arrayish | null,
      interfaceID: Arrayish | null,
      implementer: null
    ): EventFilter;

    PubkeyChanged(node: Arrayish | null, x: null, y: null): EventFilter;

    TextChanged(
      node: Arrayish | null,
      indexedKey: string | null,
      key: null
    ): EventFilter;
  };

  estimate: {
    ABI(node: Arrayish, contentTypes: BigNumberish): Promise<BigNumber>;

    addr(node: Arrayish): Promise<BigNumber>;

    authorisations(
      arg0: Arrayish,
      arg1: string,
      arg2: string
    ): Promise<BigNumber>;

    contenthash(node: Arrayish): Promise<BigNumber>;

    interfaceImplementer(
      node: Arrayish,
      interfaceID: Arrayish
    ): Promise<BigNumber>;

    pubkey(node: Arrayish): Promise<BigNumber>;

    rns(): Promise<BigNumber>;

    setABI(
      node: Arrayish,
      contentType: BigNumberish,
      data: Arrayish
    ): Promise<BigNumber>;

    setAddr(
      node: Arrayish,
      coinType: BigNumberish,
      a: Arrayish
    ): Promise<BigNumber>;

    setContenthash(node: Arrayish, hash: Arrayish): Promise<BigNumber>;

    setInterface(
      node: Arrayish,
      interfaceID: Arrayish,
      implementer: string
    ): Promise<BigNumber>;

    setPubkey(node: Arrayish, x: Arrayish, y: Arrayish): Promise<BigNumber>;

    setText(node: Arrayish, key: string, value: string): Promise<BigNumber>;

    supportsInterface(interfaceID: Arrayish): Promise<BigNumber>;

    text(node: Arrayish, key: string): Promise<BigNumber>;

    initialize(_rns: string): Promise<BigNumber>;

    setAuthorisation(
      node: Arrayish,
      target: string,
      isAuthorised: boolean
    ): Promise<BigNumber>;

    multicall(data: Arrayish[]): Promise<BigNumber>;
  };
}
