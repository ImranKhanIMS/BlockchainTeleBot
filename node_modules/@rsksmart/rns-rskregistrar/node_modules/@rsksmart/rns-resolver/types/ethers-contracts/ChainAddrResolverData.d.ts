/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ChainAddrResolverDataInterface extends Interface {
  functions: {
    supportsInterface: TypedFunctionDescription<{
      encode([interfaceId]: [Arrayish]): string;
    }>;

    addr: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    setAddr: TypedFunctionDescription<{
      encode([node, addrValue]: [Arrayish, string]): string;
    }>;

    content: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    setContent: TypedFunctionDescription<{
      encode([node, contentValue]: [Arrayish, Arrayish]): string;
    }>;

    chainAddr: TypedFunctionDescription<{
      encode([node, chain]: [Arrayish, Arrayish]): string;
    }>;

    setChainAddr: TypedFunctionDescription<{
      encode([node, chain, addrValue]: [Arrayish, Arrayish, string]): string;
    }>;

    chainMetadata: TypedFunctionDescription<{
      encode([node, chain]: [Arrayish, Arrayish]): string;
    }>;

    setChainMetadata: TypedFunctionDescription<{
      encode([node, chain, metadataValue]: [
        Arrayish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    chainAddrAndMetadata: TypedFunctionDescription<{
      encode([node, chain]: [Arrayish, Arrayish]): string;
    }>;

    setChainAddrWithMetadata: TypedFunctionDescription<{
      encode([node, chain, addrValue, metadataValue]: [
        Arrayish,
        Arrayish,
        string,
        Arrayish
      ]): string;
    }>;
  };

  events: {
    AddrChanged: TypedEventDescription<{
      encodeTopics([node, addr]: [Arrayish | null, null]): string[];
    }>;

    ChainAddrChanged: TypedEventDescription<{
      encodeTopics([node, chain, addr]: [
        Arrayish | null,
        null,
        null
      ]): string[];
    }>;

    ChainMetadataChanged: TypedEventDescription<{
      encodeTopics([node, chain, metadata]: [null, null, null]): string[];
    }>;

    ContentChanged: TypedEventDescription<{
      encodeTopics([node, content]: [null, null]): string[];
    }>;
  };
}

export class ChainAddrResolverData extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ChainAddrResolverData;
  attach(addressOrName: string): ChainAddrResolverData;
  deployed(): Promise<ChainAddrResolverData>;

  on(event: EventFilter | string, listener: Listener): ChainAddrResolverData;
  once(event: EventFilter | string, listener: Listener): ChainAddrResolverData;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ChainAddrResolverData;
  removeAllListeners(eventName: EventFilter | string): ChainAddrResolverData;
  removeListener(eventName: any, listener: Listener): ChainAddrResolverData;

  interface: ChainAddrResolverDataInterface;

  functions: {
    supportsInterface(interfaceId: Arrayish): Promise<boolean>;

    addr(node: Arrayish): Promise<string>;

    setAddr(
      node: Arrayish,
      addrValue: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    content(node: Arrayish): Promise<string>;

    setContent(
      node: Arrayish,
      contentValue: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    chainAddr(node: Arrayish, chain: Arrayish): Promise<string>;

    setChainAddr(
      node: Arrayish,
      chain: Arrayish,
      addrValue: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    chainMetadata(node: Arrayish, chain: Arrayish): Promise<string>;

    setChainMetadata(
      node: Arrayish,
      chain: Arrayish,
      metadataValue: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    chainAddrAndMetadata(
      node: Arrayish,
      chain: Arrayish
    ): Promise<{
      0: string;
      1: string;
    }>;

    setChainAddrWithMetadata(
      node: Arrayish,
      chain: Arrayish,
      addrValue: string,
      metadataValue: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  supportsInterface(interfaceId: Arrayish): Promise<boolean>;

  addr(node: Arrayish): Promise<string>;

  setAddr(
    node: Arrayish,
    addrValue: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  content(node: Arrayish): Promise<string>;

  setContent(
    node: Arrayish,
    contentValue: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  chainAddr(node: Arrayish, chain: Arrayish): Promise<string>;

  setChainAddr(
    node: Arrayish,
    chain: Arrayish,
    addrValue: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  chainMetadata(node: Arrayish, chain: Arrayish): Promise<string>;

  setChainMetadata(
    node: Arrayish,
    chain: Arrayish,
    metadataValue: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  chainAddrAndMetadata(
    node: Arrayish,
    chain: Arrayish
  ): Promise<{
    0: string;
    1: string;
  }>;

  setChainAddrWithMetadata(
    node: Arrayish,
    chain: Arrayish,
    addrValue: string,
    metadataValue: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AddrChanged(node: Arrayish | null, addr: null): EventFilter;

    ChainAddrChanged(
      node: Arrayish | null,
      chain: null,
      addr: null
    ): EventFilter;

    ChainMetadataChanged(node: null, chain: null, metadata: null): EventFilter;

    ContentChanged(node: null, content: null): EventFilter;
  };

  estimate: {
    supportsInterface(interfaceId: Arrayish): Promise<BigNumber>;

    addr(node: Arrayish): Promise<BigNumber>;

    setAddr(node: Arrayish, addrValue: string): Promise<BigNumber>;

    content(node: Arrayish): Promise<BigNumber>;

    setContent(node: Arrayish, contentValue: Arrayish): Promise<BigNumber>;

    chainAddr(node: Arrayish, chain: Arrayish): Promise<BigNumber>;

    setChainAddr(
      node: Arrayish,
      chain: Arrayish,
      addrValue: string
    ): Promise<BigNumber>;

    chainMetadata(node: Arrayish, chain: Arrayish): Promise<BigNumber>;

    setChainMetadata(
      node: Arrayish,
      chain: Arrayish,
      metadataValue: Arrayish
    ): Promise<BigNumber>;

    chainAddrAndMetadata(node: Arrayish, chain: Arrayish): Promise<BigNumber>;

    setChainAddrWithMetadata(
      node: Arrayish,
      chain: Arrayish,
      addrValue: string,
      metadataValue: Arrayish
    ): Promise<BigNumber>;
  };
}
