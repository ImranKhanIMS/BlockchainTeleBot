/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ProxyAdminDataInterface extends Interface {
  functions: {
    isOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    getProxyImplementation: TypedFunctionDescription<{
      encode([proxy]: [string]): string;
    }>;

    getProxyAdmin: TypedFunctionDescription<{
      encode([proxy]: [string]): string;
    }>;

    changeProxyAdmin: TypedFunctionDescription<{
      encode([proxy, newAdmin]: [string, string]): string;
    }>;

    upgrade: TypedFunctionDescription<{
      encode([proxy, implementation]: [string, string]): string;
    }>;

    upgradeAndCall: TypedFunctionDescription<{
      encode([proxy, implementation, data]: [string, string, Arrayish]): string;
    }>;
  };

  events: {
    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class ProxyAdminData extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ProxyAdminData;
  attach(addressOrName: string): ProxyAdminData;
  deployed(): Promise<ProxyAdminData>;

  on(event: EventFilter | string, listener: Listener): ProxyAdminData;
  once(event: EventFilter | string, listener: Listener): ProxyAdminData;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ProxyAdminData;
  removeAllListeners(eventName: EventFilter | string): ProxyAdminData;
  removeListener(eventName: any, listener: Listener): ProxyAdminData;

  interface: ProxyAdminDataInterface;

  functions: {
    isOwner(): Promise<boolean>;

    owner(): Promise<string>;

    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getProxyImplementation(proxy: string): Promise<string>;

    getProxyAdmin(proxy: string): Promise<string>;

    changeProxyAdmin(
      proxy: string,
      newAdmin: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    upgrade(
      proxy: string,
      implementation: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    upgradeAndCall(
      proxy: string,
      implementation: string,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  isOwner(): Promise<boolean>;

  owner(): Promise<string>;

  renounceOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getProxyImplementation(proxy: string): Promise<string>;

  getProxyAdmin(proxy: string): Promise<string>;

  changeProxyAdmin(
    proxy: string,
    newAdmin: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  upgrade(
    proxy: string,
    implementation: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  upgradeAndCall(
    proxy: string,
    implementation: string,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    isOwner(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    renounceOwnership(): Promise<BigNumber>;

    transferOwnership(newOwner: string): Promise<BigNumber>;

    getProxyImplementation(proxy: string): Promise<BigNumber>;

    getProxyAdmin(proxy: string): Promise<BigNumber>;

    changeProxyAdmin(proxy: string, newAdmin: string): Promise<BigNumber>;

    upgrade(proxy: string, implementation: string): Promise<BigNumber>;

    upgradeAndCall(
      proxy: string,
      implementation: string,
      data: Arrayish
    ): Promise<BigNumber>;
  };
}
