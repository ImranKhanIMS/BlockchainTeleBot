/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface AddrResolverDataContract
  extends Truffle.Contract<AddrResolverDataInstance> {
  "new"(
    rnsAddr: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<AddrResolverDataInstance>;
}

export interface ChainAddrResolverDataContract
  extends Truffle.Contract<ChainAddrResolverDataInstance> {
  "new"(
    _rns: string | BigNumber,
    _publicResolver: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<ChainAddrResolverDataInstance>;
}

export interface ProxyAdminDataContract
  extends Truffle.Contract<ProxyAdminDataInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ProxyAdminDataInstance>;
}

export interface ProxyFactoryDataContract
  extends Truffle.Contract<ProxyFactoryDataInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ProxyFactoryDataInstance>;
}

export interface ResolverV1DataContract
  extends Truffle.Contract<ResolverV1DataInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ResolverV1DataInstance>;
}

export interface AddrResolverDataInstance extends Truffle.ContractInstance {
  has(
    node: string | BigNumber,
    kind: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  supportsInterface(
    interfaceID: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addr(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setAddr: {
    (
      node: string | BigNumber,
      addrValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      addrValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      addrValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      addrValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  content(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setContent: {
    (
      node: string | BigNumber,
      hash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      hash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      hash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      hash: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ChainAddrResolverDataInstance
  extends Truffle.ContractInstance {
  supportsInterface(
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  addr(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setAddr: {
    (
      node: string | BigNumber,
      addrValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      addrValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      addrValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      addrValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  content(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setContent: {
    (
      node: string | BigNumber,
      contentValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      contentValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      contentValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      contentValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  chainAddr(
    node: string | BigNumber,
    chain: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setChainAddr: {
    (
      node: string | BigNumber,
      chain: string | BigNumber,
      addrValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      chain: string | BigNumber,
      addrValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      chain: string | BigNumber,
      addrValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      chain: string | BigNumber,
      addrValue: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  chainMetadata(
    node: string | BigNumber,
    chain: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setChainMetadata: {
    (
      node: string | BigNumber,
      chain: string | BigNumber,
      metadataValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      chain: string | BigNumber,
      metadataValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      chain: string | BigNumber,
      metadataValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      chain: string | BigNumber,
      metadataValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  chainAddrAndMetadata(
    node: string | BigNumber,
    chain: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  setChainAddrWithMetadata: {
    (
      node: string | BigNumber,
      chain: string | BigNumber,
      addrValue: string,
      metadataValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      chain: string | BigNumber,
      addrValue: string,
      metadataValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      chain: string | BigNumber,
      addrValue: string,
      metadataValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      chain: string | BigNumber,
      addrValue: string,
      metadataValue: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ProxyAdminDataInstance extends Truffle.ContractInstance {
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getProxyImplementation(
    proxy: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getProxyAdmin(
    proxy: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  changeProxyAdmin: {
    (
      proxy: string | BigNumber,
      newAdmin: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      proxy: string | BigNumber,
      newAdmin: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proxy: string | BigNumber,
      newAdmin: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proxy: string | BigNumber,
      newAdmin: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgrade: {
    (
      proxy: string | BigNumber,
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      proxy: string | BigNumber,
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proxy: string | BigNumber,
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proxy: string | BigNumber,
      implementation: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgradeAndCall: {
    (
      proxy: string | BigNumber,
      implementation: string | BigNumber,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      proxy: string | BigNumber,
      implementation: string | BigNumber,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proxy: string | BigNumber,
      implementation: string | BigNumber,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proxy: string | BigNumber,
      implementation: string | BigNumber,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ProxyFactoryDataInstance extends Truffle.ContractInstance {
  deployMinimal: {
    (
      _logic: string | BigNumber,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _logic: string | BigNumber,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _logic: string | BigNumber,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _logic: string | BigNumber,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deploy: {
    (
      _salt: number | BigNumber | string,
      _logic: string | BigNumber,
      _admin: string | BigNumber,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _salt: number | BigNumber | string,
      _logic: string | BigNumber,
      _admin: string | BigNumber,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _salt: number | BigNumber | string,
      _logic: string | BigNumber,
      _admin: string | BigNumber,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _salt: number | BigNumber | string,
      _logic: string | BigNumber,
      _admin: string | BigNumber,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deploySigned: {
    (
      _salt: number | BigNumber | string,
      _logic: string | BigNumber,
      _admin: string | BigNumber,
      _data: string,
      _signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _salt: number | BigNumber | string,
      _logic: string | BigNumber,
      _admin: string | BigNumber,
      _data: string,
      _signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _salt: number | BigNumber | string,
      _logic: string | BigNumber,
      _admin: string | BigNumber,
      _data: string,
      _signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _salt: number | BigNumber | string,
      _logic: string | BigNumber,
      _admin: string | BigNumber,
      _data: string,
      _signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getDeploymentAddress(
    _salt: number | BigNumber | string,
    _sender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getSigner(
    _salt: number | BigNumber | string,
    _logic: string | BigNumber,
    _admin: string | BigNumber,
    _data: string,
    _signature: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface ResolverV1DataInstance extends Truffle.ContractInstance {
  ABI(
    node: string | BigNumber,
    contentTypes: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, string]>;

  addr(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  authorisations(
    arg0: string | BigNumber,
    arg1: string | BigNumber,
    arg2: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  contenthash(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  interfaceImplementer(
    node: string | BigNumber,
    interfaceID: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  pubkey(
    node: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string]>;

  rns(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setABI: {
    (
      node: string | BigNumber,
      contentType: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      contentType: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      contentType: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      contentType: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAddr: {
    (
      node: string | BigNumber,
      coinType: number | BigNumber | string,
      a: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      coinType: number | BigNumber | string,
      a: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      coinType: number | BigNumber | string,
      a: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      coinType: number | BigNumber | string,
      a: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setContenthash: {
    (
      node: string | BigNumber,
      hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setInterface: {
    (
      node: string | BigNumber,
      interfaceID: string | BigNumber,
      implementer: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      interfaceID: string | BigNumber,
      implementer: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      interfaceID: string | BigNumber,
      implementer: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      interfaceID: string | BigNumber,
      implementer: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPubkey: {
    (
      node: string | BigNumber,
      x: string | BigNumber,
      y: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      x: string | BigNumber,
      y: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      x: string | BigNumber,
      y: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      x: string | BigNumber,
      y: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setText: {
    (
      node: string | BigNumber,
      key: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      key: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      key: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      key: string,
      value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceID: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  text(
    node: string | BigNumber,
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  initialize: {
    (_rns: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _rns: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rns: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rns: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAuthorisation: {
    (
      node: string | BigNumber,
      target: string | BigNumber,
      isAuthorised: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      node: string | BigNumber,
      target: string | BigNumber,
      isAuthorised: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      node: string | BigNumber,
      target: string | BigNumber,
      isAuthorised: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      node: string | BigNumber,
      target: string | BigNumber,
      isAuthorised: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  multicall: {
    (data: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      data: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;
    sendTransaction(
      data: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      data: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}
