/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class RSKOwnerData extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): RSKOwnerData;
  methods: {
    addRegistrar(registrar: string): TransactionObject<void>;

    addRenewer(renewer: string): TransactionObject<void>;

    approve(to: string, tokenId: number | string): TransactionObject<void>;

    balanceOf(owner: string): TransactionObject<string>;

    expirationTime(arg0: number | string): TransactionObject<string>;

    getApproved(tokenId: number | string): TransactionObject<string>;

    isApprovedForAll(
      owner: string,
      operator: string
    ): TransactionObject<boolean>;

    isOwner(): TransactionObject<boolean>;

    isRegistrar(registrar: string): TransactionObject<boolean>;

    isRenewer(renewer: string): TransactionObject<boolean>;

    owner(): TransactionObject<string>;

    ownerOf(tokenId: number | string): TransactionObject<string>;

    reclaim(
      tokenId: number | string,
      newOwner: string
    ): TransactionObject<void>;

    register(
      label: string | number[],
      tokenOwner: string,
      duration: number | string
    ): TransactionObject<void>;

    removeExpired(tokenIds: (number | string)[]): TransactionObject<void>;

    removeRegistrar(registrar: string): TransactionObject<void>;

    removeRenewer(renewer: string): TransactionObject<void>;

    renew(
      label: string | number[],
      time: number | string
    ): TransactionObject<void>;

    renounceOwnership(): TransactionObject<void>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: number | string
    ): TransactionObject<void>;

    setApprovalForAll(to: string, approved: boolean): TransactionObject<void>;

    setRootResolver(resolver: string): TransactionObject<void>;

    setRootTTL(ttl: number | string): TransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): TransactionObject<boolean>;

    transferFrom(
      from: string,
      to: string,
      tokenId: number | string
    ): TransactionObject<void>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    available(tokenId: number | string): TransactionObject<boolean>;

    acceptRegistrarTransfer(
      label: string | number[],
      deed: string,
      arg2: number | string
    ): TransactionObject<void>;
  };
  events: {
    Approval: ContractEvent<{
      owner: string;
      approved: string;
      tokenId: string;
      0: string;
      1: string;
      2: string;
    }>;
    ApprovalForAll: ContractEvent<{
      owner: string;
      operator: string;
      approved: boolean;
      0: string;
      1: string;
      2: boolean;
    }>;
    ExpirationChanged: ContractEvent<{
      tokenId: string;
      expirationTime: string;
      0: string;
      1: string;
    }>;
    OwnershipTransferred: ContractEvent<{
      previousOwner: string;
      newOwner: string;
      0: string;
      1: string;
    }>;
    Transfer: ContractEvent<{
      from: string;
      to: string;
      tokenId: string;
      0: string;
      1: string;
      2: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
