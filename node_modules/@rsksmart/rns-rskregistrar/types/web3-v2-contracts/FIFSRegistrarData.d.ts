/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions, EventOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, ContractEvent, TransactionObject } from "./types";

export class FIFSRegistrarData extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): FIFSRegistrarData;
  methods: {
    canReveal(commitment: string | number[]): TransactionObject<boolean>;

    commit(commitment: string | number[]): TransactionObject<void>;

    isOwner(): TransactionObject<boolean>;

    makeCommitment(
      label: string | number[],
      nameOwner: string,
      secret: string | number[]
    ): TransactionObject<string>;

    minCommitmentAge(): TransactionObject<BN>;

    minLength(): TransactionObject<BN>;

    namePrice(): TransactionObject<string>;

    owner(): TransactionObject<string>;

    price(
      name: string,
      expires: number | string,
      duration: number | string
    ): TransactionObject<BN>;

    renounceOwnership(): TransactionObject<void>;

    setMinCommitmentAge(
      newMinCommitmentAge: number | string
    ): TransactionObject<void>;

    setMinLength(newMinLength: number | string): TransactionObject<void>;

    setNamePrice(newNamePrice: string): TransactionObject<void>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    register(
      name: string,
      nameOwner: string,
      secret: string | number[],
      duration: number | string
    ): TransactionObject<void>;

    tokenFallback(
      from: string,
      value: number | string,
      data: string | number[]
    ): TransactionObject<boolean>;
  };
  events: {
    NamePriceChanged: ContractEvent<string>;
    OwnershipTransferred: ContractEvent<{
      previousOwner: string;
      newOwner: string;
      0: string;
      1: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
