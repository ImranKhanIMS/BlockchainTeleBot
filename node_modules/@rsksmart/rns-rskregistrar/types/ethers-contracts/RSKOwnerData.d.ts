/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface RSKOwnerDataInterface extends Interface {
  functions: {
    addRegistrar: TypedFunctionDescription<{
      encode([registrar]: [string]): string;
    }>;

    addRenewer: TypedFunctionDescription<{
      encode([renewer]: [string]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([to, tokenId]: [string, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    expirationTime: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    getApproved: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string;
    }>;

    isApprovedForAll: TypedFunctionDescription<{
      encode([owner, operator]: [string, string]): string;
    }>;

    isOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    isRegistrar: TypedFunctionDescription<{
      encode([registrar]: [string]): string;
    }>;

    isRenewer: TypedFunctionDescription<{
      encode([renewer]: [string]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    ownerOf: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string;
    }>;

    reclaim: TypedFunctionDescription<{
      encode([tokenId, newOwner]: [BigNumberish, string]): string;
    }>;

    register: TypedFunctionDescription<{
      encode([label, tokenOwner, duration]: [
        Arrayish,
        string,
        BigNumberish
      ]): string;
    }>;

    removeExpired: TypedFunctionDescription<{
      encode([tokenIds]: [BigNumberish[]]): string;
    }>;

    removeRegistrar: TypedFunctionDescription<{
      encode([registrar]: [string]): string;
    }>;

    removeRenewer: TypedFunctionDescription<{
      encode([renewer]: [string]): string;
    }>;

    renew: TypedFunctionDescription<{
      encode([label, time]: [Arrayish, BigNumberish]): string;
    }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    safeTransferFrom: TypedFunctionDescription<{
      encode([from, to, tokenId]: [string, string, BigNumberish]): string;
    }>;

    setApprovalForAll: TypedFunctionDescription<{
      encode([to, approved]: [string, boolean]): string;
    }>;

    setRootResolver: TypedFunctionDescription<{
      encode([resolver]: [string]): string;
    }>;

    setRootTTL: TypedFunctionDescription<{
      encode([ttl]: [BigNumberish]): string;
    }>;

    supportsInterface: TypedFunctionDescription<{
      encode([interfaceId]: [Arrayish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([from, to, tokenId]: [string, string, BigNumberish]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    available: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string;
    }>;

    acceptRegistrarTransfer: TypedFunctionDescription<{
      encode([label, deed]: [Arrayish, string, BigNumberish]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, approved, tokenId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    ApprovalForAll: TypedEventDescription<{
      encodeTopics([owner, operator, approved]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    ExpirationChanged: TypedEventDescription<{
      encodeTopics([tokenId, expirationTime]: [null, null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, tokenId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;
  };
}

export class RSKOwnerData extends Contract {
  connect(signerOrProvider: Signer | Provider | string): RSKOwnerData;
  attach(addressOrName: string): RSKOwnerData;
  deployed(): Promise<RSKOwnerData>;

  on(event: EventFilter | string, listener: Listener): RSKOwnerData;
  once(event: EventFilter | string, listener: Listener): RSKOwnerData;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): RSKOwnerData;
  removeAllListeners(eventName: EventFilter | string): RSKOwnerData;
  removeListener(eventName: any, listener: Listener): RSKOwnerData;

  interface: RSKOwnerDataInterface;

  functions: {
    addRegistrar(
      registrar: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addRenewer(
      renewer: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    balanceOf(owner: string): Promise<BigNumber>;

    expirationTime(arg0: BigNumberish): Promise<BigNumber>;

    getApproved(tokenId: BigNumberish): Promise<string>;

    isApprovedForAll(owner: string, operator: string): Promise<boolean>;

    isOwner(): Promise<boolean>;

    isRegistrar(registrar: string): Promise<boolean>;

    isRenewer(renewer: string): Promise<boolean>;

    owner(): Promise<string>;

    ownerOf(tokenId: BigNumberish): Promise<string>;

    reclaim(
      tokenId: BigNumberish,
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    register(
      label: Arrayish,
      tokenOwner: string,
      duration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeExpired(
      tokenIds: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeRegistrar(
      registrar: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeRenewer(
      renewer: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    renew(
      label: Arrayish,
      time: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setRootResolver(
      resolver: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setRootTTL(
      ttl: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: Arrayish): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    available(tokenId: BigNumberish): Promise<boolean>;

    acceptRegistrarTransfer(
      label: Arrayish,
      deed: string,
      arg2: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  addRegistrar(
    registrar: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addRenewer(
    renewer: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string): Promise<BigNumber>;

  expirationTime(arg0: BigNumberish): Promise<BigNumber>;

  getApproved(tokenId: BigNumberish): Promise<string>;

  isApprovedForAll(owner: string, operator: string): Promise<boolean>;

  isOwner(): Promise<boolean>;

  isRegistrar(registrar: string): Promise<boolean>;

  isRenewer(renewer: string): Promise<boolean>;

  owner(): Promise<string>;

  ownerOf(tokenId: BigNumberish): Promise<string>;

  reclaim(
    tokenId: BigNumberish,
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  register(
    label: Arrayish,
    tokenOwner: string,
    duration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeExpired(
    tokenIds: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeRegistrar(
    registrar: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeRenewer(
    renewer: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  renew(
    label: Arrayish,
    time: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    to: string,
    approved: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setRootResolver(
    resolver: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setRootTTL(
    ttl: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: Arrayish): Promise<boolean>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  available(tokenId: BigNumberish): Promise<boolean>;

  acceptRegistrarTransfer(
    label: Arrayish,
    deed: string,
    arg2: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    ExpirationChanged(tokenId: null, expirationTime: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimate: {
    addRegistrar(registrar: string): Promise<BigNumber>;

    addRenewer(renewer: string): Promise<BigNumber>;

    approve(to: string, tokenId: BigNumberish): Promise<BigNumber>;

    balanceOf(owner: string): Promise<BigNumber>;

    expirationTime(arg0: BigNumberish): Promise<BigNumber>;

    getApproved(tokenId: BigNumberish): Promise<BigNumber>;

    isApprovedForAll(owner: string, operator: string): Promise<BigNumber>;

    isOwner(): Promise<BigNumber>;

    isRegistrar(registrar: string): Promise<BigNumber>;

    isRenewer(renewer: string): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    ownerOf(tokenId: BigNumberish): Promise<BigNumber>;

    reclaim(tokenId: BigNumberish, newOwner: string): Promise<BigNumber>;

    register(
      label: Arrayish,
      tokenOwner: string,
      duration: BigNumberish
    ): Promise<BigNumber>;

    removeExpired(tokenIds: BigNumberish[]): Promise<BigNumber>;

    removeRegistrar(registrar: string): Promise<BigNumber>;

    removeRenewer(renewer: string): Promise<BigNumber>;

    renew(label: Arrayish, time: BigNumberish): Promise<BigNumber>;

    renounceOwnership(): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish
    ): Promise<BigNumber>;

    setApprovalForAll(to: string, approved: boolean): Promise<BigNumber>;

    setRootResolver(resolver: string): Promise<BigNumber>;

    setRootTTL(ttl: BigNumberish): Promise<BigNumber>;

    supportsInterface(interfaceId: Arrayish): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish
    ): Promise<BigNumber>;

    transferOwnership(newOwner: string): Promise<BigNumber>;

    available(tokenId: BigNumberish): Promise<BigNumber>;

    acceptRegistrarTransfer(
      label: Arrayish,
      deed: string,
      arg2: BigNumberish
    ): Promise<BigNumber>;
  };
}
