/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BytesUtilsDataInterface extends Interface {
  functions: {
    toBytes32: TypedFunctionDescription<{
      encode([input, offset]: [Arrayish, BigNumberish]): string;
    }>;

    toBytes4: TypedFunctionDescription<{
      encode([input, offset]: [Arrayish, BigNumberish]): string;
    }>;

    toUint: TypedFunctionDescription<{
      encode([input, offset]: [Arrayish, BigNumberish]): string;
    }>;

    toString: TypedFunctionDescription<{
      encode([input, offset, strLength]: [
        Arrayish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    toAddress: TypedFunctionDescription<{
      encode([input, offset]: [Arrayish, BigNumberish]): string;
    }>;
  };

  events: {};
}

export class BytesUtilsData extends Contract {
  connect(signerOrProvider: Signer | Provider | string): BytesUtilsData;
  attach(addressOrName: string): BytesUtilsData;
  deployed(): Promise<BytesUtilsData>;

  on(event: EventFilter | string, listener: Listener): BytesUtilsData;
  once(event: EventFilter | string, listener: Listener): BytesUtilsData;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): BytesUtilsData;
  removeAllListeners(eventName: EventFilter | string): BytesUtilsData;
  removeListener(eventName: any, listener: Listener): BytesUtilsData;

  interface: BytesUtilsDataInterface;

  functions: {
    toBytes32(input: Arrayish, offset: BigNumberish): Promise<string>;

    toBytes4(input: Arrayish, offset: BigNumberish): Promise<string>;

    toUint(input: Arrayish, offset: BigNumberish): Promise<BigNumber>;

    toString(
      input: Arrayish,
      offset: BigNumberish,
      strLength: BigNumberish
    ): Promise<string>;

    toAddress(input: Arrayish, offset: BigNumberish): Promise<string>;
  };

  toBytes32(input: Arrayish, offset: BigNumberish): Promise<string>;

  toBytes4(input: Arrayish, offset: BigNumberish): Promise<string>;

  toUint(input: Arrayish, offset: BigNumberish): Promise<BigNumber>;

  toString(
    input: Arrayish,
    offset: BigNumberish,
    strLength: BigNumberish
  ): Promise<string>;

  toAddress(input: Arrayish, offset: BigNumberish): Promise<string>;

  filters: {};

  estimate: {
    toBytes32(input: Arrayish, offset: BigNumberish): Promise<BigNumber>;

    toBytes4(input: Arrayish, offset: BigNumberish): Promise<BigNumber>;

    toUint(input: Arrayish, offset: BigNumberish): Promise<BigNumber>;

    toString(
      input: Arrayish,
      offset: BigNumberish,
      strLength: BigNumberish
    ): Promise<BigNumber>;

    toAddress(input: Arrayish, offset: BigNumberish): Promise<BigNumber>;
  };
}
