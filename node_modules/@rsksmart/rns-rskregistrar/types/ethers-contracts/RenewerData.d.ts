/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface RenewerDataInterface extends Interface {
  functions: {
    isOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    namePrice: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    price: TypedFunctionDescription<{
      encode([name, expires, duration]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    setNamePrice: TypedFunctionDescription<{
      encode([newNamePrice]: [string]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    renew: TypedFunctionDescription<{
      encode([name, duration]: [string, BigNumberish]): string;
    }>;

    tokenFallback: TypedFunctionDescription<{
      encode([from, value, data]: [string, BigNumberish, Arrayish]): string;
    }>;
  };

  events: {
    NamePriceChanged: TypedEventDescription<{
      encodeTopics([contractAddress]: [null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class RenewerData extends Contract {
  connect(signerOrProvider: Signer | Provider | string): RenewerData;
  attach(addressOrName: string): RenewerData;
  deployed(): Promise<RenewerData>;

  on(event: EventFilter | string, listener: Listener): RenewerData;
  once(event: EventFilter | string, listener: Listener): RenewerData;
  addListener(eventName: EventFilter | string, listener: Listener): RenewerData;
  removeAllListeners(eventName: EventFilter | string): RenewerData;
  removeListener(eventName: any, listener: Listener): RenewerData;

  interface: RenewerDataInterface;

  functions: {
    isOwner(): Promise<boolean>;

    namePrice(): Promise<string>;

    owner(): Promise<string>;

    price(
      name: string,
      expires: BigNumberish,
      duration: BigNumberish
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setNamePrice(
      newNamePrice: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    renew(
      name: string,
      duration: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    tokenFallback(
      from: string,
      value: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  isOwner(): Promise<boolean>;

  namePrice(): Promise<string>;

  owner(): Promise<string>;

  price(
    name: string,
    expires: BigNumberish,
    duration: BigNumberish
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setNamePrice(
    newNamePrice: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  renew(
    name: string,
    duration: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  tokenFallback(
    from: string,
    value: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    NamePriceChanged(contractAddress: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    isOwner(): Promise<BigNumber>;

    namePrice(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    price(
      name: string,
      expires: BigNumberish,
      duration: BigNumberish
    ): Promise<BigNumber>;

    renounceOwnership(): Promise<BigNumber>;

    setNamePrice(newNamePrice: string): Promise<BigNumber>;

    transferOwnership(newOwner: string): Promise<BigNumber>;

    renew(name: string, duration: BigNumberish): Promise<BigNumber>;

    tokenFallback(
      from: string,
      value: BigNumberish,
      data: Arrayish
    ): Promise<BigNumber>;
  };
}
