"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createReverseRegistrar = exports.createRskOwner = exports.createNameResolver = exports.createNewAddrResolver = exports.createChainAddrResolver = exports.createAddrResolver = exports.createRegistry = exports.createContractAddresses = void 0;

var _RNSRegistryData = _interopRequireDefault(require("@rsksmart/rns-registry/RNSRegistryData.json"));

var _AddrResolverData = require("@rsksmart/rns-resolver/AddrResolverData.json");

var _ChainAddrResolverData = require("@rsksmart/rns-resolver/ChainAddrResolverData.json");

var _NameResolverData = require("@rsksmart/rns-reverse/NameResolverData.json");

var _ReverseRegistrarData = require("@rsksmart/rns-reverse/ReverseRegistrarData.json");

var _RSKOwnerData = require("@rsksmart/rns-rskregistrar/RSKOwnerData.json");

var _ResolverV1Data = require("../resolvers/ResolverV1Data.json");

var _types = require("../types");

var _errors = _interopRequireWildcard(require("../errors"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createContractAddresses = networkId => {
  switch (networkId) {
    case _types.NetworkId.RSK_MAINNET:
      return {
        registry: _RNSRegistryData.default.address.rskMainnet
      };

    case _types.NetworkId.RSK_TESTNET:
      return {
        registry: _RNSRegistryData.default.address.rskTestnet
      };

    default:
      throw new _errors.default(_errors.NO_ADDRESSES_PROVIDED);
  }
};

exports.createContractAddresses = createContractAddresses;

var createRegistry = (web3, address) => new web3.eth.Contract(_RNSRegistryData.default.abi, address);

exports.createRegistry = createRegistry;

var createAddrResolver = (web3, address) => new web3.eth.Contract(_AddrResolverData.abi, address);

exports.createAddrResolver = createAddrResolver;

var createChainAddrResolver = (web3, address) => new web3.eth.Contract(_ChainAddrResolverData.abi, address);

exports.createChainAddrResolver = createChainAddrResolver;

var createNewAddrResolver = (web3, address) => new web3.eth.Contract(_ResolverV1Data.abi, address);

exports.createNewAddrResolver = createNewAddrResolver;

var createNameResolver = (web3, address) => new web3.eth.Contract(_NameResolverData.abi, address);

exports.createNameResolver = createNameResolver;

var createRskOwner = (web3, address) => new web3.eth.Contract(_RSKOwnerData.abi, address);

exports.createRskOwner = createRskOwner;

var createReverseRegistrar = (web3, address) => new web3.eth.Contract(_ReverseRegistrarData.abi, address);

exports.createReverseRegistrar = createReverseRegistrar;