"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _factories = require("./factories");

var _errors = _interopRequireWildcard(require("./errors"));

var _utils = require("./utils");

var _ErrorWrapper = _interopRequireDefault(require("./errors/ErrorWrapper"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

class _default extends _ErrorWrapper.default {
  constructor(blockchainApi, options) {
    super(options && options.lang);
    this.blockchainApi = blockchainApi; // rsk3 eth namespace are exposed in the top level namespace

    this.blockchainApi.eth = blockchainApi.eth || blockchainApi;

    if (options && options.contractAddresses) {
      this._contractAddresses = options.contractAddresses;
    }

    if (options && options.networkId) {
      this._currentNetworkId = options.networkId;
    }
  }
  /**
   * Detects current network and intantiates the contracts based on that network or in the addresses provided in the constructor.
   *
   * @throws NO_ADDRESSES_PROVIDED if the network is not RSK Mainnet or RSK Testnet and the options parameter was not provided in the constructor - KB005.
   */


  _detectNetwork() {
    var _this = this;

    return _asyncToGenerator(function* () {
      var networkId = yield _this.blockchainApi.eth.net.getId();

      if (!_this._contractAddresses) {
        _this._contractAddresses = (0, _factories.createContractAddresses)(networkId);
      }

      if (!_this._contracts) {
        _this._contracts = {
          registry: (0, _factories.createRegistry)(_this.blockchainApi, _this._contractAddresses.registry)
        };
      }

      if (!_this._currentNetworkId) {
        _this._currentNetworkId = networkId;
      }
    })();
  }

  getTxGas(contractMethod, sender) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      var from = sender || (yield (0, _utils.getCurrentAddress)(_this2.blockchainApi));
      var estimated = yield contractMethod.estimateGas({
        from
      });
      return Math.floor(estimated * 1.1);
    })();
  }

  getTxOptions(contractMethod, customOptions) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      var options;

      if (customOptions && customOptions.from) {
        options = {
          from: customOptions.from
        };
      } else {
        var sender;

        try {
          sender = yield (0, _utils.getCurrentAddress)(_this3.blockchainApi);
        } catch (_unused) {
          _this3._throw(_errors.NO_ACCOUNTS_TO_SIGN);
        }

        options = {
          from: sender
        };
      }

      if (customOptions && customOptions.gas) {
        options = _objectSpread({}, options, {
          gas: customOptions.gas
        });
      } else {
        var gas = yield _this3.getTxGas(contractMethod, options.from);
        options = _objectSpread({}, options, {
          gas
        });
      }

      if (customOptions && customOptions.gasPrice) {
        options = _objectSpread({}, options, {
          gasPrice: customOptions.gasPrice
        });
      }

      return options;
    })();
  }

  estimateGasAndSendTransaction(contractMethod, customOptions) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      var options = yield _this4.getTxOptions(contractMethod, customOptions);
      return new Promise((resolve, reject) => contractMethod.send(options).on('transactionHash', hash => resolve(hash)).on('error', reject));
    })();
  }
  /**
   * Detects the current network and instances the contracts.
   *
   * @throws NO_ADDRESSES_PROVIDED if the network is not RSK Mainnet or RSK Testnet and the options parameter was not provided in the constructor - KB005.
   */


  compose() {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      if (!_this5._composed) {
        yield _this5._detectNetwork();
        _this5._composed = true;
      }
    })();
  }
  /**
   * Returns the current networkId
   *
   * @throws LIBRARY_NOT_COMPOSED if the library was not previously composed with compose method - KB004.
   */


  get currentNetworkId() {
    if (!this._composed) {
      throw new _errors.default(_errors.LIBRARY_NOT_COMPOSED);
    }

    return this._currentNetworkId;
  }

}

exports.default = _default;
module.exports = exports.default;